@node Which components? Where to find more?
@chapter Which Components? Where to Find More?

@*

In this chapter, we present additional morphs useful for building GUIs.
Some of these components ease the process of designing GUI dialogs as
presented in @ref{Handle user interaction}. However, many bring
additional features, and we will present a selection of those.

@menu
* Cuis-Smalltalk-UI::
* Easing GUI design::
* Additional features::
@end menu

@cindex widget @subentry additional components

@node Cuis-Smalltalk-UI
@section Cuis-Smalltalk-UI

Check that you have the @file{Cuis-Smalltalk-UI} repository already
installed. It comes with several @cuis{} packages for GUI building. If not
present in your host, clone its repository in your parent directory of your
installed @file{Cuis-Smalltalk-Dev} system:

@example
cd yourPath/Cuis-Smalltalk-Dev
cd ..
git clone --depth 1 http://github.com/Cuis-Smalltalk/Cuis-Smalltalk-UI
@end example

The repository contents are divided into several packages whose classes
are listed for reference in the @file{README} page of the repository. In the
following chapter, we install individually the appropriate package when
needed.

@node Easing GUI design
@section Easing GUI Design

Let's start the exploration with a few components to ease the creation of
a GUI.

@cindex widget @subentry label @subentry squeeze

@subsection Label That Squeezes

Sometimes, labels may have a tendency to occupy more space than available.
This becomes particularly true when you do not control the content of a
label when an application is translated into other languages, with a more or
less verbose way to express messages or concepts.

The @class{SqueezeLabelMorph} tries its best to contract a message into a
given amount of characters. It is part of the @file{UI-Core.pck.st}
package. In a Workspace, install it by executing the appropriate command:

@smalltalkExample{Feature require: 'UI-Core'}

This kind of label is set with a minimum number of characters it is
willing to display. If that minimum number is lower than the label's
content, it will contract the text:

@smalltalkExampleCaption{Label that squeezes, labelSqueeze1,
(SqueezeLabelMorph
   contents: 'I am a very looong label with maybe not enough place for me'
   minCharsToShow: 20) openInWorld.}

The content of the label is very long, particularly as we inform the label
to accept being squeezed to a minimum of 20 characters. Observe how such a
squeezed label reveals its complete content in a balloon text when the
pointer is hovering over it.

@figure{A label squeezed to 20 characters,ch06-squeezeLabel,6}

When more space is made available to the label, more text of its
content is revealed:

@figure{A squeezed label given some more space,ch06-squeezeLabelMore,6}

When packing a @class{SqueezeLabel} in a layout morph with other morphs,
it will have consequences on the minimal width of the owner layout.

Compare the two examples with a squeezed and regular label:

@smalltalkExampleCaption{Squeezed label for a text entry,labelTextEntry1,
| label row | 
label := SqueezeLabelMorph 
	contents: 'I am a very long label'
	minCharsToShow: 15.
row := LayoutMorph newRow.
row
   addMorph: label;
   addMorph: (TextModelMorph withText: 'some input' :: morphExtent: 100@@0).
row openInWorld}

The whole layout is contracted to a smaller width.

@figure{A text entry with a squeezed label,ch06-squeezeLabelLayout,4}

When comparing to a regular label use case:

@figure{A text entry with a regular label,ch06-labelLayout,5}

@smalltalkExampleCaption{Regular label for a text entry,labelTextEntry2,
| row | 
row := LayoutMorph newRow.
row
   addMorph: (LabelMorph contents: 'I am a very long label');
   addMorph: (TextModelMorph withText: 'some input' :: morphExtent: 100@@0).
row openInWorld}

It is up to you to decide between the compactness of the GUI and the
readability of the labels.

@cindex widget @subentry text entry @subentry one line

@subsection One Line Entry

In @ref{Text entry}, we presented a quite complex and feature-complete
class to handle multiple lines of text editing. When only one line of
editing is needed, it is a bit overkill. In that circumstance, you can
alternatively use the @class{TextEntryMorph}, part of the
@file{UI-Entry} package:

@smalltalkExample{Feature require: 'UI-Entry'}

This class is quite simple, and contrary to the @class{TextModelMorph}, it
does not need a text model. Therefore, there is no such thing as a changed
and update mechanism involved; it is a passive morph.

However, it offers two options to interact with other objects:

@enumerate
@item
Send it the message @msg{acceptCancelReceiver:} to attach an object
answering to the @msg{accept} and @msg{cancel} messages when the
@kbd{Enter} or @kbd{Esc} keys are pressed.

@item
Send it the message @msg{crAction:} to set a block of code, with no
argument, to be executed when the @kbd{Enter} key is pressed.
@end enumerate

Let's experiment with the associated object answering to the
@msg{accept} and @msg{cancel} messages. We need a
@class{TextEntryDemo} class:

@smalltalkExample{Object subclass: #TextEntryDemo
   instanceVariableNames: 'value entry'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'DesignGUI-Booklet'}

At initialization time, we create all the needed objects:

@smalltalkMethod{initialize,
value := '42'.
entry := TextEntryMorph contents: value.
entry acceptCancelReceiver: self.
entry openInWorld}

Now we make our @class{TextEntryDemo} respond to the @msg{accept} and
@msg{cancel} messages. When pressing @kbd{Enter}, we update our
@smalltalk{value} attribute:

@smalltalkMethod{accept,
value := entry contents.
'I accepted the input ' print.
('value = '@comma{} value) print}

But when pressing @kbd{Esc}, we just delete the morph:

@smalltalkMethod{cancel,
'I discarded the input' print.
entry delete}

Observe we only need the accessors @msg{contents}/@msg{contents:} to set
and retrieve its content. It is a very simple class to use. If dependency
mechanisms were needed, an intermediate object such as the
@class{TextEntryDemo} can still be used with the observer pattern.

@cindex widget @subentry labelling
@cindex widget @subentry group

@subsection Labelling Widget

In @ref{textModelMorphExample,,example of text entry}, we used layout to
associate a text entry with a label. It is something very common when
building a GUI. The @class{LabelGroup} does exactly that for an arbitrary
number of morphs.

@smalltalkExample{Feature require: 'UI-Widgets'}

When creating a @class{LabelGroup}, we associate labels and
widgets/controls in a unique group. In return, the user gets a layout to be
inserted in a dialog or a window.

@smalltalkExampleCaption{Labelling a group of morphs, labelMorphs,
(LabelGroup with: @{
'First Name:' -> TextEntryMorph new.
'Last Name:' -> TextEntryMorph new@}) openInWorld}

@figure{Text entries associated with labels,ch06-labelGroup,3.5}

The group also gives access to the controls, although it is not a very
efficient way to access the input widgets used in the group; it is handy.

@figure{Access to the controls of a label group,ch06-labelGroupControls,6}

A label group is useful when constructing small dialogs. In the next
section, we build one with the morphs we learned in this section and the
previous ones.

@cindex panel
@cindex dialog
@cindex window @subentry panel
@cindex window @subentry dialog

@subsection Packing in Panel & Dialog

Small windows the user interacts with are called dialogs or panels.
@file{Cuis-Smalltalk-UI} offers several alternatives to use.

@smalltalkExample{Feature require: 'UI-Panel'}

Let's rewrite the @ref{textModelMorphExample,, example of text entry}
with what we just learned. The end result will look like this:

@figure{A greeting dialog, ch06-greetingDialog, 6}

In the hierarchy provided by the @file{UI-Panel} package, we use the
@class{DialogPanel} class. It offers both an area to plug our
interactive components and an area for our button.

@smalltalkExample{DialogPanel subclass: #GreetingPanel
   instanceVariableNames: 'firstName lastName greetLabel'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'DesignGUI-Booklet'}

We set the default color of the dialog:

@smalltalkMethod{defaultColor,
@return{} `Color lightOrange`}

Then install the iconic buttons for its title:

@smalltalkMethod{initialize,
super initialize.
self showButtonsNamed: #(close expand)}

To know about the available buttons for the title bar of a panel, read
the class @class{WindowTitleMorph}. The expand action needs a rewrite of
its associated action:

@smalltalkMethod{expandButtonClicked,
self fullScreen}

We set our components in the dedicated @method{newPane} method of the
@class{Dialog} hierarchy:

@smalltalkMethod{newPane,
| column group |
column := LayoutMorph newColumn :: 
   color: Color transparent;
   gap: 10 .
group := LabelGroup with: @{
   'First Name: ' -> (firstName := TextEntryMorph contents: '') .
   'Last Name: ' -> (lastName := TextEntryMorph contents: '') @}.
greetLabel := LabelMorph contents: '' font: nil emphasis: 1.
column 
   addMorph: group layoutSpec: (LayoutSpec fixedWidth: 300);
   addMorph: greetLabel layoutSpec: (
      LayoutSpec proportionalWidth: 0 fixedHeight: 20 offAxisEdgeWeight: #center).
@return{} column}

The button has its own method too for installation:

@smalltalkMethod{newButtonArea,
@return{} PluggableButtonMorph model: self action: #greet label: 'Greet' ::
   color: self widgetsColor}

Finally, we implement the @method{greet} action of the button to update
the @smalltalk{greetLabel}:

@smalltalkMethod{greet,
greetLabel contents: (
   'Hello @{1@} @{2@}!' format: @{firstName contents. lastName contents@})}

@node Additional features
@section Additional Features

In the next sections, we present a very small selection of useful
components. There are many more to explore in the repository; they all
come with example methods to learn from in their class side.

@subsection Radio and Check Buttons

These widgets are found in the @file{UI-Click-Select} package. 

@cindex widget @subentry check button

In a GUI, a check button represents a boolean value. They are used in
groups with a text label or any kind of morph to represent its iconic
representation.

@smalltalkExampleCaption{Check group, checkGroup,
| column group |
column := LayoutMorph newColumn.
group := CheckGroup fromList: #('Cuis' 'Pharo' 'Squeak').
group buttons do: [:each | each when: #checkSelection send: #show: to: Transcript].
column
   addMorph: (LabelMorph contents: 'I use...' bold);
   addMorph: group.
column openInWorld}

@figure{A group of check buttons, ch06-checkGroup, 1.5}

To meaningfully manage the check and uncheck events, different action
methods can be set for each check box. The previous example could be
rewritten:

@smalltalkExample{@dots{}
cuisCheck := [:check |
   check isSelected
   ifTrue: ['I use Cuis' print] ifFalse: ['I don''t use Cuis' print] ] .
group buttons first 
   when: #checkSelection 
   send: #value: 
   to: cuisCheck.
@dots{}}

Do not add the @smalltalk{cuisCheck} variable in the declaration at the
first line of the script; otherwise, it will be garbage collected.
Indeed, action events are weakly referenced -- i.e., it does not add a
count to its reference use. Of course, in an application, you will use a
method selector as the argument of the @msg{to:} keyword.

@cindex widget @subentry radio button

In a radio group, only one check button is selected at a time. When a
new button is selected, the previously selected button is
deselected. A radio button is drawn differently, as a circle. We can
alter our previous greeting dialog to add a radio group to select a
preferred color:

@smalltalkMethod{newPane,
| column group radioColors |
@dots{}
radioColors := RadioGroup fromList: #(Blue White Red).
radioColors when: #informRadioSelection send: #setColor: to: self.
column 
   addMorph: group layoutSpec: (LayoutSpec  fixedWidth: 300);
   addMorph: radioColors beRow;
@dots{}}

And the associated action method:

@smalltalkMethod{setColor: aColorSymbol, 
self color: (Color perform: aColorSymbol asLowercase asSymbol)}

@figure{Our enhanced dialog to select color with radio buttons,ch06-greetLabelRadio,6}

@cindex widget @subentry drop down button

@subsection Drop Down Button

A drop-down button is a button whose content is selected from a drop-down
list. When the user clicks such a button, a menu is displayed below the
button. The content of the list is textual when using the class
@class{DropDownListMorph}, or it can be any kind of morph when using the
class @class{DropDownButtonMorph}.

We can add a drop-down button to let the user select an icon to decorate
our greeting dialog. We adjust our existing code to add an image morph
to the pane and the drop-down button:

@smalltalkMethod{newPane,
| column group radioColors |
@dots{}
   'Last Name: ' -> (lastName := TextEntryMorph contents: '').
   'Preferred icon: ' -> self dropDownIcons @rbracechar{}.
@dots{}
column 
   addMorph: (myImage := ImageMorph new);
   addMorph: group layoutSpec: (LayoutSpec  fixedWidth: 300);
@dots{}}

The creation of the button is delegated to another method:

@smalltalkMethod{dropDownIcons,
| morphs listModel | 
morphs := #(addressBookIcon chatIcon clockIcon doItIcon findIcon) collect: [:anIcon |
   ImageMorph new ::
      image: ((Theme current perform: anIcon) magnifyTo: 32@@32) ].
listModel := ListModel with: morphs.
listModel when: #listSelectionChanged send: #updateIcon: to: self.
@return{} DropDownButtonMorph 
   withModel: listModel listGetter: #list indexGetter: #listIndex indexSetter: #listIndex:}

We create a collection of image morphs, each with a different icon. We use
a @class{ListModel} to hold the collection and trigger events when the
@emph{list selection is changed}. In that circumstance, the message
@msg{updateIcon:} is sent to the dialog with the argument the list model;
this method is straightforward:

@smalltalkMethod{updateIcon: aListModel,
myImage image: aListModel selectedItem form}

@figure{A Drop down button of image morphs,ch06-dropDownButton,6}

It is possible to use an application model instead of a @class{ListModel}.
In that circumstance, the associated getter and setter would be
implemented in this model too.

@cindex widget @subentry decorated

@subsection Decorating Component

Decorating a component is a nice way to set a label around one or several
widgets, but it is much more than that. The decorated components are
highlighted with a surrounding line and a textual label, then an optional
list of quick buttons. The quick buttons can be anything to operate on
the surrounded components.

The class @class{DecoratedPane} is part of the @file{UI-Panel}; it is
likely already installed on the @cuis{} system of the reader if the
previous sections of this booklet were read. A decorated pane expects a
morph to decorate, a string, and an optional collection of buttons:

@smalltalkExampleCaption{Decorating a morph, decoratedMorph1,
(DecoratedPane
   open: (Sample03Smiley new)
   label: 'Be Happy') openInWorld }

@figure{A smiley decorated with a 'Be Happy' slogan, ch06-beHappy, 3}

Let's go back to our greeting panel and decorate the
@smalltalk{greetLabel} with an information label and two quick
buttons: one to reset the greeting and a second one to greet the
author of the running @cuis{} image. We need to edit again our
@method{newPane} method:

@cindex icon

@smalltalkMethod{newPane,
| column group radioColors decorator |
@dots{}
greetLabel := LabelMorph contents: '' font: nil emphasis: 1.
decorator := DecoratedPane 
   open: greetLabel 
   label: 'Decorated Label'  
   quickButtons: @{
      PluggableButtonMorph 
         model: [greetLabel contents: 'Hello ', Utilities authorName] action: #value :: 
         icon: (Theme current fetch: #('16x16' 'actions' 'contact-new')) ; 
         setBalloonText: 'Say hello to the Smalltalk author of this running Cuis image.' .
      PluggableButtonMorph 
         model: [greetLabel contents: ''] action: #value :: 
         icon: (Theme current fetch: #('16x16' 'actions' 'edit-clear')); 
         setBalloonText: 'Take back my greeting.' @}.
@dots{}}

Then, in the column morph, we add the @smalltalk{decorator} instead of
the @smalltalk{greetLabel}:

@smalltalkMethod{newPane,
@dots{}
column
   @dots{}
   addMorph: radioColors beRow;
   addMorph: decorator.
@dots{} }

Observe the @class{PluggableButtonMorph}; we use @class{BlockClosure} as a
model and the message @msg{value} as the action to get it executed at
button click. In a real application, you will more likely use an instance
as a model and an associated method of its protocol.

@figure{The greeting label decorated with two quick buttons, ch06-decoratedPane,6}

@cindex icon @subentry importing

@subsection Importing Icons

Icons are important when designing GUIs. @cuis{} comes with a few sets
of icons. Explore the @label{icons} method category of the
@class{Theme} class; each of these methods returns a @class{Form} to use
as an icon in a @class{PluggableButtonMorph}.

@smalltalkExample{PluggableButtonMorph 
   model: self action: #close :: 
   icon: Theme current closeIcon}

@cindex icon @subentry @class{ContentPack}

There are additional icons found in @class{ContentPack}
instances. Invoke an explorer on @smalltalk{Theme content}@footnote{In
a Workspace, highlight @smalltalk{Theme content} and do
@kbd{Ctrl-Shift-I}} to browse those packs:

@figure{Content packs in @cuis{},ch06-contentPacks,9}

To use one particular icon of a given content pack, you specify its
size, the name of the content pack it belongs to, and the icon name
without the file extension:

@smalltalkExample{Theme current fetch: #('16x16' 'actions' 'appointment-new')}

Several icons come with @emph{shortcut} found in the @class{Theme} class. 
Now you may want to use alternative icons; this is where you use the
@class{IconImporter} class:

@smalltalkExample{Feature require: 'UI-Graphic-Import'}

Beware, it installs the @file{SVG} package too and its dependencies.
It lets you import both @acronym{PNG} and @acronym{SVG} graphic files
and scale them at different square sizes. You create an instance with
a path where to search for the icons:

@smalltalkExample{icons := IconImporter path: '/home/dev/Dynamic-Book/icons'}

Then you ask for a @class{Form} or an @class{ImageMorph} of a given
icon. To use the file @file{group.svg} located in @file{
'/home/dev/Dynamic-Book/icons'} as an icon and to scale it as a 32x32
pixels form, you write:

@smalltalkExample{icons getForm: #group32}

Or to request an image morph for direct use in a GUI of your own:

@smalltalkExample{(icons getMorph: #group32) openInHand}

@figure{Request an @class{ImageMorph} from a graphic file, ch06-iconImporterMorph, 1}

The requested icons of a given size are cached in the icon importer;
later requests of the same icon and size have a minimal processing cost.

There are several options to explore in @class{IconImporter}, particularly
when you need to adjust the icon size to the screen density:

@smalltalkExample{" to request an icon with a size set at execution time "
icons getForm: #group ofSize: MyApp iconSize.

" to open an image morph with the given icon "
(icons getMorph: #group ofSize: 64) openInWorld}

With @class{MyApp} deducing the @method{iconSize} from user preferences.

When dealing with @acronym{SVG} graphics, monochrome icons may be painted
with a given color:

@smalltalkExample{icons getForm: #group ofSize: 64 fill: Color red}

@figure{Get a picture as an icon and paint it in red,ch06-iconImporterFill,1.5}


