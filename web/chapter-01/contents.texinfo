@node Chapter 1
@chapter Chapter 1

@quotation
The computer is simply an instrument whose music is ideas.
@author Alan Kay
@end quotation

@*

This booklet covers web development using @cuis{}.
Popular Smalltalk libraries for web development include
Seaside (@url{https://book.seaside.st/book}) and Pier (@url{https://www.piercms.com}).
Seaside has been ported to work in Pharo and Squeak, but not @cuis{}.
Pier is a content management system that is compatible with Pharo Smalltalk,
but has not been ported to work with Squeak or @cuis{}.

@node Pacakges
@section Packages

The only web development package I have found that is compatible with @cuis{}
is WebClient (@url{https://wiki.squeak.org/squeak/6337} and
@url{https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Packages/Features/WebClient.pck.st}).
This works with Squeak and has been ported to @cuis{}, but not to Pharo.

This booklet focuses on using WebClient in @cuis{} to implement
processing and sending HTTP requests.

@node Installing
@section Installing

To get started, open a Workspace, enter @smalltalk{Feature require: 'WebClient'},
and @label{Do it}.  This adds many classes in the @label{WebClient...Core} category including
@class{WebClient}, @class{WebRequest}, @class{WebResponse}, @class{WebServer}, and @class{WebSocket}.

@node HTTP Clients
@section HTTP Clients

The @class{WebClient} class defines class methods that send HTTP requests.
For example:

@smalltalkExample{res @assign{} WebClient httpGet: 'https://pokeapi.co/api/v2/pokemon/pikachu'}

The value of the variable @smalltalk{res} above is a @smalltalk{WebResponse} object.
It has many instance variables including:
@itemize

 @item @smalltalk{code} - status code such as 200

 @item @smalltalk{content} - response body

 @item @smalltalk{headers} - an @class{OrderedCollection} of
  @class{Association} objects that describe the HTTP response headers
  such as `content-type` with a value like `text/html; charset=utf-8` or
  `application/json; charset=utf-8`

 @item @smalltalk{protocol} - such as the `String` `HTTP/1.1`

 @item @smalltalk{status} - such as the `String` `HTTP/1.1 200 OK`

 @item @smalltalk{url} - the URL to which the request was sent

@end itemize

@node HTTP Servers
@section HTTP Servers

Our server will receive and send objects described using the JSON
format.  The JSON library supports this.  To install it, open a
Workspace, enter @smalltalk{Feature require: 'JSON'}, and @label{Do it}.

To handle HTTP requests, create a @class{WebServer} instance
and send it the @msg{listenOn:} message with a port number.
This starts a Smalltalk process called "WebServers's listener process".
To kill it, open a @dfn{Process Browser}, select the process,
and press @kbd{cmd-t} (Terminate).

Let's walk through the steps to implement and use a web server
that provides an API for performing CRUD operations
on objects that represent dogs.
To keep things simple, we will hold all the data in memory
rather than persisting it to a database.

First, create the class @class{Dog}:

@smalltalkExample{Object subclass: #Dog
   instanceVariableNames: 'breed name'
   classVariableNames: 'Count'
   poolDictionaries: ''
   category: 'SomeCategory'}

Next, define the following class method:

@smalltalkExample{Dog>>name: aName breed: aBreed
   @return{} self new setName: aName breed: aBreed}

Next, define the following instance methods:

@smalltalkExample{Dog>>setName: aName breed: aBreed
   name := aName.
   breed := aBreed

Dog>>breed
   @return{} breed

Dog>>name
   @return{} name}

Next, create the class @class{MyWebServer}:

@smalltalkExample{Object subclass: #MyWebServer
   instanceVariableNames: 'dogDict server'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'SomeCategory'}

Next, define the following instance methods in the class @class{MyWebServer}:

@smalltalkExample{MyWebServer>>initialize
"Demonstrates using the WebServer class
This looks for files in the Cuis-Smalltalk-Dev-UserFiles directory.
TODO: Describe why it is necessary to define a new verion of
the browseRequest method."

   server @assign{} WebServer new.
   server addService: '/public' action: [:req|
      WebServer browseRequest2: req].
@c "server addService: '/' action: [ :req | req send200Response: 'Home Page']."
@c "server addService: '/hello' action: [ :req | req send200Response: 'Hello World!']."
	
   server
      addService: '/hello'
      action: (MessageSend receiver: self selector: #helloWorld:).

   server
      addService: '/dog'
      action: (MessageSend receiver: self selector: #handleDog:)
      methods: #('DELETE' 'GET' 'POST' 'PUT').

@c "server addService: '/dog' action: [ :req | self createDog: req ] methods: #('POST')."
@c "addService: '/dog' action: [ :req | self updateDog: req ] methods: #('PUT');"
@c"addService: '/dog' action: [ :req | self deleteDog: req ] methods: #('DELETE')"
}

@smalltalkExample{MyWebServer>>start
   | dog1 dog2 |
   dog1 @assign{} Dog name: 'Comet' breed: 'Whippet'.
   dog2 @assign{} Dog name: 'Oscar' breed: 'German Shorthaired Pointer'.
   dogDict @assign{} Dictionary newFrom: @{
      dog1 id -> dog1.
      dog2 id -> dog2 @}.
   server listenOn: 3000}

@smalltalkExample{MyWebServer>>stop
   server stopListener}

@smalltalkExample{MyWebServer>>helloWorld: req
   req send200Response: 'Hello, World!'}

@smalltalkExample{MyWebServer>>element: anAssoc
"This returns an HTML string.
The key in the Association must be a kind of String (such as a Symbol).
The value in the Association can be a primitive value or
an Array of Associations that represent nested elements."	
   | content inner tag template |
   tag @assign{} anAssoc key.
   content @assign{} anAssoc value.
   "TODO: Add support for attributes."
   template @assign{} '<@{1@}>@{2@}</@{1@}>'.
   (content isKindOf: String)
      ifTrue: [@return{}â€‹ template format: @{ tag. content @} ]
      ifFalse: [
         "Maybe this should raise an exception if
         (content isKindOf: SequenceableCollection) is false."
	 inner @assign{} ''.
	 content do: [ :item | inner @assign{} inner, (self element: item) ].
	@return{} template format: @{ tag. inner @} ]}

@smalltalkExample{MyWebServer>>createDog: aRequest
   | dog res |
   "Get Dog object from request body. An id will be assigned."
   dog @assign{} Dog fromJson: aRequest stream.
   "Save the new dog."
   dogDict at: dog id put: dog.
   "Return the new dog as JSON."
   res @assign{} WebResponse protocol: aRequest protocol code: 201. "Created"
   res headerAt: 'Content-Type' put: 'application/json; charset=utf-8'.
   @return{} aRequest sendResponse: res content: (Json render: dog)}

@smalltalkExample{MyWebServer>>deleteDog: aRequest id: id
"Delete the dog, verifying that a dog with the given id exists."
   dogDict removeKey: id ifAbsent: [@return{} aRequest send404Response].
   "Return an empty response."
   @return{} aRequest send200Response: ''}

@smalltalkExample{MyWebServer>>getDogsAsHtml: aRequest
   | css html tableRows |
   css @assign{} 'body @{ font-family: sans-serif @}
table @{ border-collapse: collapse @}
td, th @{
   border: 1px solid gray;
   padding: 0.5rem;
@}
th @{
   background-color: pink;
@}'.
	
   tableRows @assign{} OrderedCollection new.
   tableRows add: #tr -> @{ #th -> 'Name'. #th -> 'Breed' @}.
   dogDict do: [ :dog |
      tableRows add: (#tr -> @{ #td -> dog name. #td -> dog breed @}) ].
   html @assign{} self element: (#html -> @{
      #head -> @{
         #title -> 'My Dogs'.
         #style -> css @}.
      #body -> @{
         #h1 -> 'My Dogs'.
         #table -> tableRows @}
   @}).
		
   aRequest send200Response: html contentType: 'text/html'}

@smalltalkExample{MyWeServer>>getDogsAsJson: aRequest
   | json |
   "Create a JSON array from the dog Dictionary."
   json @assign{} render: dogDict asArray.
   "Return the JSON."
   aRequest
      send200Response: json
      contentType: 'application/json; charset=utf-8'}

@smalltalkExample{MyWebServer>>handleDog: aRequest	
"handle an HTTP request based on its method"
   | id method |
   method @assign{} aRequest method.
   (#('DELETE' 'PUT') includes: method) ifTrue: [
      "Get the path parameter value."
      "TODO: Is this really the best way to do it?"
      | parts |
      parts @assign{} url prefixAndSuffix: $/.
      id @assign{} [parts last asNumber]
         on: Error
         do: [:e | | res |
            res @assign{} protocol: aRequest protocol code: 400.
            @return{} aRequest
               sendResponse: res
               content: e messageText ] ].

   method caseOf: @{
      ['GET'] -> [ | accept |
         accept @assign{} aRequest headerAt: 'Accept'.
         (accept includesSubString: 'application/json') ifTrue: [
            @return{} self getDogsAsJson: aRequest].
         (accept includesSubString: 'text/html') ifTrue: [
            @return{} self getDogsAsHtml: aRequest ] ].
      ['POST'] -> [self createDog: aRequest].
      ['DELETE'] -> [self deleteDog: aRequest id: id value].
      ['PUT'] -> [self updateDog: aRequest id: id value]
    @}}

@smalltalkExample{MyWebServer>>updateDog: aRequest id: id
   | dog |

   "Verify that a dog with the given id exists."
   dogDict at: id ifAbsent: [@return{} aRequest send404Response].

   "Get Dog object from request body."
   dog @assign{} fromJson: aRequest stream.
   dog logAs: 'dog'.
	
   "Update its id to match id parameter."
   dog id: id.
	
   "Save the change."
   dogDict at: dog id put: dog.

   "Return the updated dog as JSON."
   @return{} aRequest
      send200Response: (Json render: dog)
      contentType: 'application/json; charset=utf-8'}

To start this server, open a Workspace, enter the following,
select all the lines, and @label{Do it}:

@smalltalkExample{server @assign{} MyWebServer new.
server start}

To stop the server, execute @smalltalk{server stop} with @label{Do it}.
