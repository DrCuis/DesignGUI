@node What is a Morph after all?
@chapter What is a Morph after all?

@*

The Cuis' Morph framework is fundamental to @cuis{}, every single visual piece the user sees and interacts with in the Cuis' window is a morph. A morph offers both visual representation and interactivity with keyboard and mouse inputs.

@menu
* A World of Morphs::
* Morph Hierarchy::
@end menu


@node A World of Morphs
@section A World of Morphs

@cindex morph @subentry count
A bit of introspection reveals how many @class{Morph} instances are in use in the @cuis{} living system:

@smalltalkExampleCaption{How many buttons?,ch04-buttonCount,
PluggableButtonMorph allInstances size
@result{} 288@footnote{As a recall, you @emph{execute-and-print} to get the result printed; otherwise, it is only executed. Use shortcut @kbd{Ctrl-p} instead of @kbd{Ctrl-d}.}}

The previous example asked for one specific type of morph. What about asking for all types of morph?

@smalltalkExampleCaption{How many morphs are operating on the system?,ch-04-allMorphCount,
Morph allSubclasses inject: 0 into: [:count :aClass |
   count + aClass allInstances size]
@result{} 1558}

This number, likely different on your own @cuis{} system, represents all the objects necessary to operate visually the system. This count changes all the time, new morph are created and ones no more necessary are garbage collected regularly. Play a bit with the system and evaluate again this count.

@subsection Tree of morphs
@cindex morph @subentry sub-morph
@cindex morph @subentry owner
Any morph can contain other morphs. We already know a @class{LayoutMorph} contains several morphs and manage the way there are layed out; these is reflected in the @smalltalk{submorphs} attribute of each morph, when this collection is empty it means there is no sub-morph. In the other hand, a morph knows about its unique owner: the @smalltalk{owner} attribute of each morph refers to the morph owning it. And as you can expect it, the owner morph @smalltalk{submorphs} attribute contains the owned morph as well.

Then what happens when the @smalltalk{owner} attribute is @smalltalk{nil}? The morph is simply not visible! This double link between owner and owned is very convenient and necessary for the morph framework depending on the situation. For example, while an owned morph may have its own local coordinates system for its drawing operations, it can refer to its owner to know about its global coordinates situation, from the point of view of the owner or even from the World perspective -- @emph{simplified for readiness}:

@smalltalkExample{Morph>>externalizeToWorld: aPoint
"aPoint is in own coordinates. Answer is in world coordinates."
| inOwners |
inOwners := self externalize: aPoint.
@return{} owner externalizeToWorld: inOwners}

Access to the owner is also useful for mundane aspect as the style. A morph asks its owner's color to draw itself accordingly:

@smalltalkExample{MenuLineMorph>>drawOn: aCanvas 
| baseColor |
baseColor := owner color.
aCanvas
   fillRectangle: (`0@@0` corner: extent x @@ (extent y / 2))
   color: baseColor twiceDarker.
...}		

In the other hand, the owner, depending on its nature, can decide how to dispose its sub-morphs, like does a @class{LayoutMorph} by first requesting which sub-morphs to lay out:

@smalltalkExample{LayoutMorph>>submorphsToLayout
"Select those that will be layout"
@return{} submorphs select: [ :m | m visible ]}


@subsection Halo of icons
@cindex morph @subentry halo
Because everything is an object in @cuis{}, every visual part of the system is represented through an object the user can interact and inspect from a system level perspective. The Halo system, designed with objects, is a special visual tool to know more about specific @class{Morph} instances. It is invoked on any @class{Morph} instance by a middle button click, a halo of coloured icons then shows up, surrounding the selected morph.

@figure{Halo of a @class{LayoutMorph},ch04-halo,5}

Supplementary click accesses a sub-morph under the mouse pointer, the halo is then updated accordingly. When pressing the @kbd{Shift} key, the direction of morph selection is changed: the owner of the morph the mouse is over is selected instead.

Each icon gives access to specific actions to operate on the morph.

@figure{Halo and descriptions on each icon functions,ch04-haloDescription,13}

Some actions need clarifications:

@itemize
   @item 
   @strong{grab.} It grabs the morph from its owner and can be dropped in the World or any other morph accepting dropped morph

   @item
   @strong{move.} It moves the morph in its owner. Try the differences between grab and move with a menu entry in the World menu.

   @item
   @strong{resize.} On a text morph, it changes the area of the morph; on more graphics oriented morph as the Clock example in @cuis{}, it scales the morph.

   @item 
   @strong{explore.} It opens directly the explorer tool discussed earlier.
@end itemize

We previously discussed the sub-morph and owner relationship among morphs. In a halo, the orange wrench icon at the right gives access to a set of actions to explore these relations, try it!

@figure{Actions to explore sub-morph and owner relations,ch04-haloDebug,4}


@subsection The special World morph
@cindex morph @subentry world
In @cuis{}, there is a special morph, a @class{WorldMorph} instance, representing the top morph of @cuis{}.

@smalltalkExampleCaption{There is only one World!,ch04-worldCount,
WorldMorph allInstances
@result{} @{ [world]@}}

@cindex morph @subentry explore
Guess what? It is the only morph without an owner and still visible. Take any morph in the world, invoke its halo, then from the wrench icon, select the menu entry @label{explore morph} and browse the chain of owner until you reach the World, you discover it does not have owner:

@figure{The chain of owners of a morph,ch04-morphOwners,5}

Execute the following code to experiment on a morph from its inspector.

@smalltalkExampleCaption{Create a morph@comma{} inspect it and open it in the World,newInspectMorph,
Morph new ::
   inspect;
   openInWorld}

@cindex morph @subentry flash
A blue rectangular morph shows up at the top left corner of the @cuis{} window. Sometime, the morph we are playing with is out of sight, or we are not sure where it is; a convenient way to find is to ask it flashes itself. In the inspector, execute the code @smalltalk{self flash}.

Any morph knows about its World, in the inspector execute: @smalltalk{self runningWorld}. As a World is a kind of @class{Morph}, we can flash it too: @smalltalk{self runningWorld flash}.

@node Morph Hierarchy
@section Morph Hierarchy
The @class{Morph} class is the root class to all kind of @class{Morph}, sub-classes specialize on specific facets or add some features. Let's learn a bit more about the @class{Morph} class itself and then explore its most fundamental sub-classes.

In a stock @cuis{} system, browse the @class{Morph} class; it is in the @label{Morphic>Kernel} class category, here are the most fundamental type of @class{Morph}s:

@cindex morph @subentry kernel
@indentedblock
@class{Morph}
   @indentedblock
   @class{PlacedMorph}
      @indentedblock
      @class{BoxMorph}
       @indentedblock
       @class{ColoredBoxMorph}
         @indentedblock
         @class{BorderedBoxMorph}
         
         @class{PasteUpMorph}

            @indentedblock
            @class{WorldMorph}
            @end indentedblock            
         @end indentedblock
       @end indentedblock
      @class{HandMorph}
      @end indentedblock      
   @end indentedblock
@end indentedblock

Observe how the @class{Morph} has only @class{PlacedMorph} as its subclass, this is odd and it requires some scrunity by looking at the differences between these two classes. Indeed, if @class{Morph} has only one sub-class, the two should be merged. Let's examine the attributes of the @class{Morph} class:

@smalltalkExampleCaption{Definition of the @class{Morph} class,morphDefinition,
Object subclass: #Morph
   instanceVariableNames: 'owner submorphs properties id privateDisplayBounds'
   classVariableNames: 'LastMorphId'
   poolDictionaries: ''
   category: 'Morphic-Kernel'}

@cindex morph @subentry properties
There are the expected @smalltalk{owner} and @smalltalk{submorphs} attributes; the @smalltalk{properties} attribute is set, when needed, as a dictionary to dynamically add attributes or behaviors -- with appropriate bloc of code -- to any @class{Morph} instances. There are companion methods to set or retrieve a property.

@figure{@class{Morph}'s methods to manipulate properties,ch04-property,8}

This @smalltalk{properties} attribute is used a lot. For example, observe its use case to set a specific name to a @class{Morph} instance:

@smalltalkExampleCaption{Methods to set and get a morph name, morphNameMethods,
Morph>>name: anObject
  "Set the morphName property"
   self setProperty: #morphName toValue: anObject

      Morph>>name
   "Answer the value of morphName"
   @return{} self valueOfProperty: #morphName}

Create a new morph as see in @ref{newInspectMorph}, then in the inspector execute @smalltalk{self name: 'Glouby'}, observe how @smalltalk{properties} was amended with the dictionary entry @smalltalk{#morphName->'Glouby'}; when invoking the morph's halo, its new name is printed too.

@figure{A morph's properties,ch04-morphProperties,8}

Back to the @class{Morph} definition, you can observe there is no attribute to describe the shape of a morph!@footnote{The other attributes are used for internal managment of the morphs and you don't need to care about them.} Indeed a morph has no prestablised shape, its shapes is described dynamically -- at execution time -- through its @method{drawOn:} method:

@smalltalkExampleCaption{@class{Morph}'s @method{drawOn:}, morphDrawOn,
Morph>>drawOn: aCanvas
drawOn: aCanvas
   aCanvas
      fillRectangle: `-75 @@ -70 corner: 75 @@ 70`
      color: `Color blue`}

A @class{Morph} instance draw instructions are relative to its owner's coordinates system. If you observe this blue rectangular morph we created, it is located on the top left corner of the World, where are the (0,0) coordinates; in fact, a large part of this morph is not visible, three quarters of its areas is outside of the screen.

If you observe the halo as see in @ref{ch04-morphProperties}, there is no @strong{scale}, @strong{resize} and @strong{rotate} icons! Indeed, a @class{Morph} instance can't be resized or rotated. Moreover, when you try to move the morph through its @strong{move} icon, you can't, it sticks to its position, hard coded in its @method{drawOn:} method. It is about time to introduce the @class{PlacedMorph} class which offers these features.

@cindex morph @subentry @class{PlacedMorph}
@cindex morph @subentry position
@cindex morph @subentry scale
@cindex morph @subentry rotate
@subsection Morph you can move
@emph{...but not only.}

These abilities of @class{PlacedMorph} to scale, to resize, to rotate and to be moved are some of the differences with @class{Morph}. It is about time to examine its definition:

@smalltalkExampleCaption{Definition of the @class{PlacedMoprh}, placedMorphDefinition,
Morph subclass: #PlacedMorph
   instanceVariableNames: 'location layoutSpec'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Kernel'}

We have two more instance variables:

@cindex morph @subentry affine transformation
@cindex morph @subentry matrix transformation

@itemize
   @item
   This @smalltalk{layoutSpec} attribute is obviously related to the optional layout specification used when a @class{PlacedMorph} instance is set in a layout morph, this also tells us a @class{Morph} instance can't be set in a layout.

   @item
   This @smalltalk{location} attribute holds the information regarding position, scale and rotation; it is a kind of affine transformation coded as a matrix@footnote{@url{https://en.wikipedia.org/wiki/Affine_transformation#Augmented_matrix}}. These transformations are applied -- in one matrix transformation -- relatively to its owner.
   
@end itemize

Time to experiment a bit! Execute this simple code to explore with the inspector:

@smalltalkExample{Sample10PythagorasTree new ::
   openInWorld ;
   inspect}

Then invoke its halo to move, resize and rotate to observe how its @smalltalk{location} attribute is updated:

@figure{@smalltalk{location} update according to scale@comma{} position and rotation,ch04-location,7}

In one attribute, we have the information on position, size and rotation. Moreover, when sending messages to a morph as @smalltalk{#morphPosition}, @smalltalk{#morphPosition:}, @smalltalk{#scale:}, @smalltalk{#rotation:}, etc., @cuis{} is just querying or adjusting the @smalltalk{location} matrix parameters. Therefore, you, as the user of a @class{PlacedMorph} instance you only use these messages without the need to care about the underneath matrix representation.

@cindex morph @subentry pixel detection
@cindex morph @subentry bits mask

One last bit of experiment to foster Morph understanding, @cuis{} knows about morph detection; in our previous morph's inspector, execute and print @smalltalk{self coversPixel: 0@@0}, the answer is likely false if the morph is not positioned to cover the World origin. Now inspect its @smalltalk{properties}, there is a @smalltalk{bitMask} entry referring to 1 bit depth @class{Form}, this is how @cuis{} does pixel detection. In this @class{Form}, a kind of picture, each bit represents the pixel obstruction of the morph: 0 means nothing painted, 1 means the morph paints the pixel with an arbitrary color we don't need to know about here.

This property is automatically garbage collected when not needed anymore or irrelevant.

@figure{Pixel detection illustrated,ch04-morphBitMask,9}

The reader may wonder if there is any use case of the @class{Morph} class when its instances can't be grabbed and moved around. Why not just using @class{PlacedMorph}? In DrGeo software@footnote{@url{http://gnu.org/s/dr-geo}}, such morphs are used to represent geometric objets drawn in the coordinates system of the owner morph, their positions and aspect are completely dependend on the underneath mathematics models.


@cindex morph @subentry @class{BoxMorph}
@cindex morph @subentry rectangular
@subsection Rectangular Morph
The remaining classes of the kernel morph hierarchy adds geometry and visual properties. @class{BoxMorph} is the most important one, it is bounded to a rectangular extent. It is the root of most sub-morphs used to construct @acronym{GUI,Graphic User Interface}, indeed its elements are most of the time bounded to a rectangular shape. It allows a lot of optimisation in the rendering of the whole @cuis{} @acronym{GUI}.

@smalltalkExampleCaption{Definition of the @class{BoxMorph}, boxMorphDefinition,
PlacedMorph subclass: #BoxMorph
   instanceVariableNames: 'extent'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Kernel'}

@cindex morph @subentry extent
This additional @smalltalk{extent} attribute defines its width (x-axis) and height (y-axis) in the morph local coordinates. There are companion methods to play with:

@smalltalkExample{BoxMorph new ::
   openInWorld;
   morphWidth: 1000;
   morphHeight: 10}

Or more directly:

@smalltalkExample{BoxMorph new ::
   openInWorld;
   morphExtent: 1000@@10}

@cindex morph @subentry local bounds
As this is a kind of @class{PlacedMorph}, we ask directly about its bounds -- position and extent -- by executing and printing the result:

@smalltalkExample{BoxMorph new ::
   openInWorld;
   localBounds
@result{} 0@@0 corner: 50@@40.}

The returned object is a @class{Rectangle} instance, as @class{Point} instances, this is a fundamental architecture class when dealing with @acronym{GUI}.

Observe as you get the same local bounds even when positioning around the morph:
@smalltalkExample{BoxMorph new ::
   openInWorld;
   morphPosition: 200@@200;
   localBounds
@result{} 0@@0 corner: 50@@40.}

@cindex morph @subentry bounds in owner
This is because we are asking in the local morph coordinates system. What the reader may want is to ask in the owner coordinates system, here the @cuis{} World:
@smalltalkExample{"Morph positioned at pointer position"
BoxMorph new ::
  openInWorld;
  @strong{fullBoundsInOwner}
@result{} 493@@594 corner: 543@@634.

"Morph positioned according to programming instruction"
BoxMorph new ::
   openInWorld;
   morphPosition: 200@@200;
   @strong{fullBoundsInOwner}
@result{} 200@@200 corner: 250@@240.}

@cindex morph @subentry pixel detection
There are several methods dealing specifically with @class{BoxMorph}, take a look at them and play a bit to foster your understanding. A last bit about this class, earlier at @ref{ch04-morphBitMask} we discussed about pixel detection with a complicated morph containing holes. In this situation, the detection is done with a expensive computed mask. @class{BoxMorph} optimizes this thanks to its rectangular shape:

@smalltalkExampleCaption{Optimized @class{BoxMorph} pixel detection, coversPixelBoxMorph,
BoxMorph>>coversPixel: worldPoint
"Answer true as long as worldPoint is inside our shape even if:
   - a submorph (above us) also covers it
   - a sibling that is above us or one of their submorphs also covers it.
This implementation is cheap@comma{} we are a rectangular shape."
@return{} self coversLocalPoint: (self internalizeFromWorld: worldPoint)}

By browsing the inheritance of this method, read how different it is for a non rectangular morph.

The other morph classes in the kernel category, @class{ColoredBoxMorph} and @class{BorderBoxMorph}, add cosmetic features as color, border width and color, padding to set space between the border and inner content. It doesn't require much explanation. @class{PasteUpMorph} and @class{WorldMorph} are rarely used.

This modest dive-in the Morph framework is now over, we hope it
provided enough background to foster your understanding when building
@acronym{GUI}. In another booklet we will discuss more deeply the
Morph framework.
