@node Advanced design patterns in GUI
@chapter Advanced Design Patterns in GUI

@*

In section @ref{Design a GUI application}, we presented a fundamental design
pattern for GUI applications. As the development of your GUI application
progresses and grows in complexity, you may want to use additional design
patterns. The book @emph{Design Patterns Smalltalk Companion} is a must-read
for any serious application developer. Design patterns help to develop
code that is easier to maintain; they provide a common ground, easing mutual
understanding.

In the following sections, we present several of these patterns with
concrete use cases in applications developed with the @cuis{} system.

@menu
* Command:: Manage undo and redo operations
* Flyweight:: Factory to create or retrieve objects
* Builder:: Build object according to user given input
* Template Method:: Generalize a building process then specialize
* State:: Manage GUI tools and tool states
* Bridge:: Output a GUI representation to a file
* Strategy:: Adapt to various host platforms
@end menu

@cindex undo @seeentry{design pattern}
@cindex redo @seeentry{design pattern}
@cindex design pattern @subentry undo
@cindex design pattern @subentry redo
@cindex design pattern @subentry command

@node Command
@section Command

Among the design patterns, this is likely the one that impacts the
end-user the most, as it lets you implement the undo and redo operations.

The template repository
@label{CuisApp}@footnote{@url{https://github.com/hilaire/CuisApp}}
demonstrates the design of a picture viewer as a simple Cuis
application example. The user can rotate, flip, and scale a picture.
Its undo and redo actions are implemented with three classes:

@itemize

@item
@class{AppCommandStack}. Its instance records the history of
commands. It is a sort of @class{ReadWriteStream} with additional
behavior, particularly to truncate the stack of commands. Indeed, when
a new command is inserted into the stack -- which may not be at the end
depending on whether the user activated the @label{undo} action -- the
tail of the stack must be truncated with the @method{truncate}
method. A @method{previous} method is also needed for the @label{undo}
action.

@item
@class{AppCommandManager}. Its instance manages the stack of commands:
it creates new commands from user actions and then undoes and redoes commands. For
each specific user action, there is a dedicated method:
@method{flipHorizontally}, @method{rotateLeft}, @method{zoomIn}, etc.

All these methods share the same pattern: instantiate a command, then
execute it:

@smalltalkMethod{flipHorizontally,
|command|
command := stack nextPut: (AppFlipHCommand presenter: presenter).
@return{} command execute}

Some commands require additional parameters:

@smalltalkMethod{rotateLeft,
|command|
command := stack nextPut: (AppRotateCommand presenter: presenter).
command degrees: -90.
@return{} command execute}

@item
@class{AppCommand}. The top-level class of a hierarchy of commands, one for
each user operation. Its subclasses are @class{AppFlipHCommand},
@class{AppRotateCommand}, etc. Each of these classes implements the
@method{execute} and @method{unexecute} methods differently.

For some actions like flipping horizontally, the @method{unexecute} is identical
to @method{execute}:

@smalltalkMethod{AppFlipHCommand>>execute,
self imageMorph image: (self imageMorph form flippedBy: #vertical)}

@smalltalkMethod{AppFlipHCommand>>unexecute,
self execute}

Rotating requires an additional behavior (@method{rotatedBy:} is not copied
here):

@smalltalkMethod{AppRotateCommand>>execute,
self imageMorph image: (self rotatedBy: degrees)}

@smalltalkMethod{AppRotateCommand>>unexecute,
self imageMorph image: (self rotatedBy: degrees negated)}

The @method{execute} and @method{unexecute} methods void their effects. In
some circumstances, the @method{execute} may have a destructive effect, as
happens in the zoom out action; an additional attribute is then used to
keep a copy of the initial data:

@smalltalkMethod{AppZoomOutCommand>>execute,
cacheForm := self imageMorph form.
self imageMorph image: (cacheForm magnifyBy: 0.5)}

So undoing properly restores the data:

@smalltalkMethod{AppZoomOutCommand>>unexecute,
self imageMorph image: cacheForm}

How @method{execute} and @method{unexecute} are implemented really
depends on the nature of the command.

@end itemize

@ignore 
---
  config:
    class:
      hideEmptyMembersBox: true
---
classDiagram
class Command{
   presenter
   execute()
   unexecute()
}

class RotateCommand{
   degrees
   degrees:()
   rotateBy:()
}
class ZoomOutCommand {
   cacheForm
}

class CommandStack~ReadWriteStream~
class CommandManager {
   stack
   presenter
   undo()
   redo()
   rotateLeft()
   rotateRight()
   flipHorizontally()
   flipVertically()
   zoomIn()
   zoomOut()
}

Command <|-- FlipHCommand
Command <|-- FlipVCommand
Command <|-- RotateCommand
Command <|-- ZoomInCommand
Command <|-- ZoomOutCommand

CommandStack --> "0..n" Command
CommandManager --> "1" CommandStack

@end ignore

@figure{Command pattern diagram (for ease of reading@comma{} the @emph{App}
prefix is removed),ch07-commandDiagram,16}

@subsection Memory Game with Undo/Redo

What would be the implication of implementing the undo and redo actions within
our game? Our game is simple; the user can only click one card at a time.
Therefore, we want to record this and also the consequences on the game
state, if any. The consequences can be none, matching cards, or non-matching
cards; each resulting in a different changed game state.

When implementing the user interaction with a command, the @method{execute}
method will deal with these three possible outcomes. Its @method{unexecute}
counterpart will have to reverse the game to its original state.

If the game state has a small memory footprint, it is less cumbersome to
just save its state before executing each user action. The game state is
the collection of each card's status: the done and flipped Boolean values.

Our Memory game just needs to be flanked with the command classes we
described earlier, unchanged. Then the @class{Command} hierarchy will have one
subclass @class{PlayCardCommand}:

@smalltalkExample{Command subclass: #PlayCardCommand
   tanceVariableNames: 'status position'
   @dots{}}

It captures the game state in its @smalltalk{status} attribute, of
the same nature as the cards array in the Memory game model:

@smalltalkMethod{initialize,
status := Array2D newSize: presenter model cards size}

At command execution,  

@smalltalkMethod{execute,
self backupModels.
presenter flip: position}

the game state is backed up before flipping the card:

@smalltalkMethod{backupModels,
| size |
size := presenter model cards size.
1 to: size y do: [:y |
   1 to: size x do: [:x | | card |
      card := presenter model cards at: x@@y.
      status at: x@@y put: (Array with: card isFlipped with: card isDone) ]]}

The undo action restores the game state before execution:

@smalltalkMethod{unexecute,
" Restore the status of the card models "
| size |
size := status size.
1 to: size y do: [:y |
   1 to: size x do: [:x | | cardStatus card |
      card := presenter model cards at: x@@y.
      cardStatus := status at: x@@y.
      card 
         flip: cardStatus first;
         done: cardStatus second ] ]}

The card models' @method{flip:} and @method{done:} methods are refactored to
trigger events propagated to the card view:

@smalltalkMethod{MemoryCardModel>>flip: boolean,
" Set my flip state and trigger a color event for my view accordingly to my flip state "
| newColor |
flipped = boolean ifTrue: [@return{} self].
flipped := boolean.
newColor := flipped ifTrue: [color] ifFalse: [self backColor].
self triggerEvent: #color with: newColor}

and

@smalltalkMethod{done: boolean,
done = boolean ifTrue: [@return{} self].
done := boolean.
self triggerEvent: (done ifTrue: [#lock] ifFalse: [#unlock])}

In @ref{Memory Game v3}, you will find the complete source of the
modified Memory game: toolbar with undo and redo buttons.

@cindex design pattern @subentry flyweight

@node Flyweight
@section Flyweight

The idea of the flyweight pattern is to have objects in one place and to avoid
duplication. It is often associated with the factory pattern, so this will be
both the place where objects are manufactured or retrieved.

DrGeo uses the flyweight and factory patterns to manage the geometric objects
created by the user. A geometric object is manufactured once the user has provided
enough information by selecting a set of existing objects in a sketch.

To create a segment AB, the user selects point A and point B. If the user
creates a new segment and selects point A and point B again, a new
segment is not created, but instead, the existing segment AB is returned.
Similarly, if the user selects point B then point A, the same existing
segment AB is returned. This mechanism occurs in the flyweight factory.

In DrGeo, there are three classes. An abstract @class{DrGFactory}:

@smalltalkExample{Object subclass: #DrGFactory
   instanceVariableNames: 'pool last'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'DrGeo-Factories'}

Then two subclasses, @class{DrGMacroFactory} and @class{DrGMathItem}, to
manage the pool of macro-constructions and mathematics items.

The existing objects are held in a pool of objects:

@smalltalkMethod{initialize,
pool := OrderedCollection new}

when a new object is pushed into the factory@footnote{The items are not
built in the factory; this process is factored out in a family of
builder classes discussed in the next section.}, it is first searched
for in the pool:

@smalltalkMethod{pushAsLastWhenInPool: anItem,
"If this item has a twin in the pool@comma{} push as last this last one and return true@comma{}
otherwise return false"

@return{} (self findInPool: anItem)
   ifNotNil: [ :item | 
      self last: item.
      true ]
   ifNil: [ false ]}


To find in the pool, its index, if any, is searched:

@smalltalkMethod{findInPool: item,
"Try to find a twin of this mathItem@comma{} if so return the twin@comma{} otherwise nil"
@return{} self at: (self indexOf: item in: pool)}

Determining if an object has a twin depends on the nature of each object. It
is done through a hash and equality check at the object level:

@smalltalkMethod{indexOf: anItem in: aPool,
"No identity equality but hashed value to detect duplicated object we must consider as equal"
@return anItem 
   ifNil: [0]
   ifNotNil: [aPool findFirst: [ :each | 
      each hash = anItem hash
      "double check when hash is equal (can be a collision)"
      and: [each = anItem] ] ]}


@cindex design pattern @subentry template method

If we look at our segment AB example, we want to establish segment AB and
segment BA as the same mathematics object.

In DrGeo, the geometric object model uses the template method pattern to
establish how equality is articulated:

@smalltalkMethod{DrGMathItem>>= aMathItem,
@return{} aMathItem isMathItem
   and: [self basicType == aMathItem basicType
   and: [self nodeType == aMathItem nodeType
   and: [self parentsEqual: aMathItem] ] ]}

For a segment defined by two points, @smalltalk{basicType} is
@smalltalk{#segment} and @smalltalk{nodeType} is @smalltalk{#'2pts'}.

The subclasses of @class{DrGMathItem} implement the @method{parentsEqual:}.
In @class{DrGSegment2ptsItem}, we cross-check if the extremities of the
segments are the same points:

@smalltalkMethod{parentsEqual: aMathItem,
@return{} parents asSet = aMathItem parents asSet}

Comparing can be slow, therefore we first compare the hash value of each
object, pre-computed:

@smalltalkMethod{rehash,
@return{} hash := (parents asSet hash 
bitXor: self nodeType hash) 
bitXor: self basicType hash}

These details show the tricky part in this pattern: how to establish if two
objects are identical. With objects representing mathematics items, it is
difficult; the identity check done by DrGeo is very limited. After all, we
could have two segments that are mathematically identical through a process of
transformations, and only a mathematics solver could establish it.

@cindex design pattern @subentry builder

@node Builder
@section Builder

A builder is an object specialized to construct one or several types of
objects. The type of the constructed object depends on the nature of the
inputs sent to the builder. Explained differently, depending on the input
received by the builder, it will figure out what to construct and how to construct a new
object with the provided inputs.

In DrGeo, there is a whole hierarchy of 39 builders. The abstract class
@class{DrGMathItemBuilder} provides the general mechanism through template
methods. When an object is added to the builder, it is first asked if it is
wanted or not. Next, once the object is added to the builder, it is asked if
the builder is ready to build a new object. If so, an event is propagated to
whatever is listening:

@smalltalkMethod{add: aMathItemCollection at: aPoint,
"
Add a math item in the selection list of the builder@comma{} aPoint is the position where the action took place. Return true if mathItem accepted
"
@return{} (self isWanted: aMathItemCollection at: aPoint)
   and: [
      self addItem: aMathItemCollection at: aPoint.
      "Are we done? If so notify our dependent"
      self readyToBuild ifTrue: [self triggerEvent: #readyToBuild].
      true]}

Let's look at the subclass @class{DrGBuilderMiddle}, a builder to
construct the midpoint of two points or a segment.

@smalltalkExample{DrGMathItemBuilder subclass: #DrGMiddleBuilder
   instanceVariableNames: 'pointA pointB segment'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'DrGeo-Presenter-Builder'}

The methods are overridden to fit the task. The middle builder filters items
that are either a point or a segment and, depending on the history of the
already added item to the builder:

@smalltalkMethod{isWanted: aMathItemCollection,
@return{} aMathItemCollection notEmpty 
   and: [
      (aMathItemCollection first isPointItem and: [aMathItemCollection first ~= pointA])
      or: [aMathItemCollection first isSegmentItem and: [pointA isNil]] ]}

Observe that a segment is not wanted if a point -- pointA -- was already
provided to the builder.

Adding an item to a builder also depends on the history of added items;
pointB will be set once pointA is already known:

@smalltalkMethod{addItem: aMathItemCollection at: aPoint,
super addItem: aMathItemCollection at: aPoint.
aMathItemCollection first isPointItem 
   ifTrue: [
      pointA ifNil: [
         pointA := aMathItemCollection first.
         @return{} self].
      pointB ifNil: [
         pointB := aMathItemCollection first.
         @return{} self ] ]
   ifFalse: [segment := aMathItemCollection first]}

Once the segment or the points A and B are known, we are ready to build the
midpoint:

@smalltalkMethod{readyToBuild,
@return{} segment notNil or: [pointA notNil and: [pointB notNil]]}

In the DrGeo GUI, each builder is associated with a tool activated by
a button or a menu entry. A builder is very handy to both give feedback to
the user and to interpret what the user wants to do.

For example with the @class{DrGMiddleBuilder}:

@itemize

@item
@strong{Feedback.} Thanks to the @msg{isWanted:} message, DrGeo
selectively shows balloon text on the relevant mathematics items for
the builder.

@figure{A balloon text indicates this segment can be
selected,ch07-hoverSegment,3}

but does not when hovering over non-relevant mathematics items.

@figure{No balloon text indicates this circle can't be
selected,ch07-hoverCircle,3}

@item
@strong{Interpret.} Once a mathematics item is added to the builder,
the @msg{isWanted:} discards additional options for future selection.

@figure{Point A was selected@comma{} it can't be selected
again nor the segment AB@comma{} but point B can,ch07-hoverPoint,2}

@end itemize

@cindex design pattern @subentry template method
@node Template Method
@section Template Method
This pattern is used massively, and it is very likely present in your
code. The principle is to write the structure of a method in an
abstract class. The method uses auxiliary methods implemented in
subclasses, each one with a different and specific
implementation. In the abstract class, these methods will respond
@smalltalk{self subclassResponsibility} or provide a minimal
implementation to be overridden in subclasses.

In @ref{Flyweight}, we briefly mentioned the template method pattern
in a use case to implement equality between two mathematics items:

@smalltalkMethod{DrGMathItem>>= aMathItem,
@return{} aMathItem isMathItem
   and: [self basicType == aMathItem basicType
   and: [self nodeType == aMathItem nodeType
   and: [self parentsEqual: aMathItem] ] ]}

Although @class{DrGMathItem} provides a simple implementation of
@method{parentsEqual:},

@smalltalkMethod{parentsEqual: aMathItem,
@return{} parents = aMathItem parents}

many of its subclasses override it to adjust to the mathematics item:

@smalltalkMethod{DrGAngleBisector3ptsItem>>parentsEqual: aMathItem,
@return{} parents = aMathItem parents
   or: [parents reverse = aMathItem parents]}

@smalltalkMethod{DrGPolygonNptsItem>>parentsEqual: aPolygon,
| shiftedCollection |
parents size = aPolygon parents size ifFalse: [@return{} false].
shiftedCollection := parents.
shiftedCollection size timesRepeat: [
   shiftedCollection = aPolygon parents ifTrue: [@return{} true].
   shiftedCollection := shiftedCollection shiftRight].
shiftedCollection := parents reverse.
shiftedCollection size timesRepeat: [
   shiftedCollection = aPolygon parents ifTrue: [@return{} true].
   shiftedCollection := shiftedCollection shiftRight].
@return{}  false}

In the @ref{Builder}, we have a template method too to decide when to add a
mathematics item to a builder:

@smalltalkMethod{add: aMathItemCollection at: aPoint,
@return{} (self isWanted: aMathItemCollection at: aPoint)
   and: [
      self addItem: aMathItemCollection at: aPoint.
      "Are we done? If so notify our dependent"
      self readyToBuild ifTrue: [self triggerEvent: #readyToBuild].
      true]}
      
This time the @method{isWanted:} and @method{readyToBuild} methods are
not implemented in the top class of the builder hierarchy:

@smalltalkMethod{isWanted: aMathItemCollection,
" Check if the builder is interested by aMathItem "
self subclassResponsibility}

@smalltalkMethod{readyToBuild,
"Can the builder build the math item now?"
self subclassResponsibility}

Only subclasses implement the behavior to fit their purpose. For example,
in @class{DrGLocusBuilder}:

@smalltalkMethod{isWanted: aMathItemCollection,
@return{} aMathItemCollection notEmpty and: [
   (aMathItemCollection first isPointItemOnCurve and: [freePoint isNil])			
   or: [aMathItemCollection first isConstrainedPointItem and: [constrainedPoint isNil]] ]}

@smalltalkMethod{readyToBuild,
@return{} freePoint notNil and: [constrainedPoint notNil]}

@method{buildItem} is another template method. It builds an item once enough
relevant mathematics items have been added to the builder:

@smalltalkMethod{buildItem,
| itemDefinitions |
itemDefinitions := self mathItemClass.
@return{} itemDefinitions isCollection 
   ifFalse: [@{itemDefinitions newWith: self arguments in: presenter@}]
   ifTrue: [point := point + (0.2@@1.3).
      itemDefinitions collect: [:class | 
         point := point - (0@@0.5).
         class newWith: self arguments in: presenter]]}

Its abstract methods @method{mathItemClass} and @method{arguments} are
implemented in the subclasses. Again, for locus:

@smalltalkMethod{mathItemClass,
@return{} DrGLocus2ptsItem}

@smalltalkMethod{arguments,
@return{} @{freePoint. constrainedPoint@}}

The builder pattern is very handy for dealing with the complexity of constructing
various kinds of objects, each with its own constraints. In DrGeo, a
builder is associated with a tool and state to manage its input and its
progress toward creating the new mathematics item. We present tool and state
in the next section.

@cindex design pattern @subentry state

@node State
@section State

In DrGeo, when the user clicks on a button to operate on the sketch, it is
selecting a tool: to move items, to edit the styles, to delete items, to
create new ones, etc.

A tool is often associated with a builder, and it can handle different
states through dedicated methods. Possible states are:
@smalltalk{handleChoice:}, @smalltalk{handleMouseAt:},
@smalltalk{handlePress:}, @smalltalk{handlePressShiftKey:},
@smalltalk{handleRelease}, @smalltalk{handleReleaseShiftKey},
@smalltalk{handleShiftKey:}, @smalltalk{handleShiftKeyMouseAt:},
@smalltalk{handleStillPress:}

The @class{DrGDrawable} class, a Morph used as a canvas for the sketch, is
responsible for the low-level duty of translating user actions with
the pointer and keyboard into message sending to one of the methods enumerated
above.

The messages are sent to the current tool. For example, when the pointer is
hovering over the sketch:

@smalltalkMethod{DrGDrawable>>mouseHover: evt localPosition: localEventPosition,
"handle mouse move with button up"
localEventPosition = prevMousePos ifTrue: [@return{} self]. "nothing to process"
evt shiftPressed 
   ifTrue: [self tool @emph{handleShiftKeyMouseAt:} localEventPosition]
   ifFalse: [self tool @emph{handleMouseAt:} localEventPosition].
prevMousePos := localEventPosition}

Or when the user clicks somewhere with button 1:

@smalltalkMethod{DrGDrawable>>mouseButton1Down: evt localPosition: localPosition,
evt shiftPressed 
   ifTrue: [self tool @emph{handlePressShiftKey:} localPosition ]
   ifFalse: [self tool @emph{handlePress:} localPosition].
self showUnderMouseMorph}

Or when button 2 is released:

@smalltalkMethod{DrGDrawable>>mouseButton1Up: evt localPosition: localPosition,
evt shiftPressed 
   ifTrue: [self tool @emph{handleReleaseShiftKey:} localPosition]
   ifFalse: [self tool @emph{handleRelease:} localPosition ].
(self localBounds containsPoint: localPosition) 
   ifFalse: [Cursor normalCursorWithMask activateCursor]}

The state design pattern works with two hierarchies of classes: the contexts
and the states. In DrGeo, a context is the tool currently in use, and
@class{DrGTool} is the root of this hierarchy. A tool can be in various
internal states; therefore, the tool dispatches to its internal state the
responsibility to handle the user actions:

@smalltalkMethod{DrGTool>>handleMouseAt: aPoint,
@return{} self state handleMouseAt: aPoint}

Or

@smalltalkMethod{DrGTool>>handlePressShiftKey: aPoint,
@return{} self state handlePressShiftKey: aPoint}

The @class{DrGBuildTool} is the tool to construct new items; it comes with a
builder, as described in @ref{Builder}:

@smalltalkExample{DrGTool subclass: #DrGBuildTool
   instanceVariableNames: 'selectedMorphs builder'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'DrGeo-Presenter-Tool'}

When a tool is initialized, it is set to a default neutral state:

@smalltalkMethod{DrGBuildTool>>initialize,
super initialize.
self switchState:  DrGBuildToolState.
selectedMorphs := OrderedCollection new}

@smalltalkMethod{DrGTool>>switchState: aStateClass,
self state: (aStateClass new context: self)}

The build tool lets the user define a new mathematics item by selecting
existing items in a sketch. The relevant message is @method{handlePress:}:

@smalltalkMethod{DrGBuildToolState>>handlePress: aPoint,
"Return true if we process something (including additional user choice)"
| morphs |
self drawable hideTip.
self context last: aPoint.
morphs := self context relevantMorphsNear: aPoint.
morphs size = 1 ifTrue: [
   self handleChoice: morphs.
   @return{} true].
(morphs size = 0 and: [self context isWanted: #() ]) ifTrue: [
   self handleChoice: morphs.
   @return{} true].
"More than one math item under mouse@comma{} user must choose one item"
morphs size >= 2 ifTrue: [
   "Display a pop-up menu to select one item"
   self context chooseMorph: morphs.
   @return{} true].
@return{} false}

The @class{DrGBuildTool} has only one state. The @class{DrGSelectTool}
is much more interesting as it comes with 9 different states.

With this tool, the user interacts with the sketch by dragging items,
reassigning points, or even cloning items.

@smalltalkMethod{initialize,
self reset.
builder := DrGCloneBuilder new}

The tool is initialized in a neutral state:

@smalltalkMethod{reset,
super reset.
start := nil.
self switchState: DrGSelectToolStateNeutral.
mathItems := nil.
builder ifNotNil: [builder reset]}

It is therefore enlightening to look at the handlers of this state. For
example, when hovering a sketch (@msg{handleMouseAt:}), the pointer shape
is adjusted to a pointing hand to inform the user that something can be grabbed:

@smalltalkMethod{DrGSelectToolStateNeutral>>handleMouseAt: aPoint,
| processSomething |
(processSomething := super handleMouseAt: aPoint)
   ifTrue: [Cursor webLinkCursor activateCursor] 
   ifFalse: [Cursor normalCursorWithMask activateCursor].
@return{} processSomething }

More interestingly, when the mouse button is pressed
(@msg{handlePress:})on a relevant item, the tool is switched to a
grabbed state with class @class{DrGSelectToolStateGrabbed}:

@smalltalkMethod{DrGSelectToolStateNeutral>>handlePress: aPoint,
| morphs griddedPoint|
self drawable hideTip.
griddedPoint := self context gridPoint: aPoint.
morphs := self context relevantMorphsNear: aPoint.
morphs size = 1 
   ifTrue: [
      self context last: griddedPoint.
      self context morph: morphs first.
      self context updateDirtyItemsList.
      self switchState: DrGSelectToolStateGrabbed.
      @return{} true ].
"More than one math item under mouse"
morphs size > 1 
   ifTrue: [
      self context last: griddedPoint.
      self context chooseMorph: morphs.
      @return{} true ].
"The user clicked in the background@comma{} clear the selection"
self context reset.
@return{} false}

It offers two dedicated handlers. In case the mouse button is released
(@msg{handleRelease:}) while in the grabbed state, the tool switches back
to the neutral state:

@smalltalkMethod{DrGSelectToolStateGrabbed>>handleRelease: aPoint,
self switchState: DrGSelectToolStateNeutral.
self context reset.
"After move event rehash the the free positionable item"
self context factory rehash}

If instead the mouse is moving (@msg{handleMouseAt:}), the tool
switches to a dragged state with class
@class{DrGSelectToolStateDragged}:

@smalltalkMethod{DrGSelectToolStateGrabbed>>handleMouseAt: aPoint,
"The user is moving@comma{} switch to dragging state"
self context
   start: aPoint;
   last: aPoint.
self context morph isBitmap 
   ifTrue: [self switchState: DrGSelectToolStateDraggedBitmap] 
   ifFalse: [self drawable dottedLinesToParentsOf: self mathItem.
      self switchState: DrGSelectToolStateDragged].
@return{} true}

Understanding how the state of a given tool -- or context in the State
design pattern terminology -- changes is complex to follow. Knowing
how the pattern works is fundamental to understanding what is going
on. This pattern proved to be useful to handle the complexity of a
collection of GUI tools, each with its own way of interacting with
the UI environment.

Sequence diagrams help to have a global understanding of the flow of states
in a given tool.

@c sequenceDiagram
@c SelectToolStateNeutral->>SelectToolStateGrabbed: handlePress:<br/>(grabbing item)
@c SelectToolStateNeutral-->>SelectToolStateNeutral: handleMouseAt:<br/>(feedback)
@c SelectToolStateNeutral-->>SelectToolStateNeutral: handleShiftKeyMouseAt:<br/> (mutate feedback)
@c SelectToolStateGrabbed->>SelectToolStateNeutral: handleRelease:<br/>(drop item, no move)
@c SelectToolStateGrabbed->>SelectToolStateDragged: handleMouseAt:<br/>(move grabbed item)
@c SelectToolStateGrabbed->>SelectToolStateDragged: handleStillPress:<br/>(drag cloned item)
@c SelectToolStateDragged->>SelectToolStateNeutral: handleRelease:<br/>(drop item)
@c SelectToolStateDragged-->>SelectToolStateDragged: handleMouseAt:<br/>(still moving item)
@c SelectToolStateDragged-->>SelectToolStateDragged: handleStillPress:<br/>(merge points)
@c SelectToolStateNeutral->>MutatorToolStateGrabbed: handlePressShiftKey:<br/>(grab point to mutate)
@c MutatorToolStateGrabbed->>MutatorToolStateDragged: handleMouseAt:<br/>(detach point)
@c MutatorToolStateGrabbed->>SelectToolStateNeutral: handleRelease:<br/>(cancel mutation)
@c MutatorToolStateDragged-->>MutatorToolStateDragged: handleMouseAt:<br/>(mutate point)
@c MutatorToolStateDragged->>SelectToolStateNeutral: handleRelease:<br/>(drop mutuated point)


@figure{States sequence of the Select tool,ch07-statesSequence,16}


@cindex design pattern @subentry bridge
@node Bridge
@section Bridge

The @cuis{} graphic system is organized into two hierarchies of classes:

@itemize

@item
The @class{MorphicCanvas} hierarchy offers 2D drawing services. Notable
subclasses are the @class{BitBltCanvas} based on the original Smalltalk-80
Bits Block Transfer service, the Vector Graphics service specific to the
@cuis{} system, and the Hybrid service, which uses both previous
services simultaneously for both efficiency and high rendering quality (@class{HybridCanvas}).

@item
The @class{VectorEngine} hierarchy offers the concrete implementation
of the graphic rendering. In the sub-hierarchy,
@class{VectorEngineSmalltalk} is the pure Smalltalk implementation for
research and debugging purposes. In the sub-hierarchy,
@class{VectorEngineWithPlugin} is the C implementation for optimal
speed rendering. Both offer various quality and speed rendering
options with specific classes.

@end itemize

The @class{MorphicCanvas} hierarchy represents the @strong{Abstraction} part,
and the @class{VectorEngine} hierarchy is the @strong{Implementation} part of
the graphic system. It is an example of the Bridge pattern in the @cuis{}
system.

The abstraction part represents the public protocol used for drawing the
Morphs on the screen. Depending on the type of canvas, different rendering
engines are then used.

The @class{AbstractVectorCanvas} is the default abstraction used in the
@cuis{} system. Observe its protocol is largely inspired by SVG:

@anchor{Sample01Star}
@smalltalkMethod{Sample01Star>>drawOn: aCanvas,
aCanvas strokeWidth: 12 color: Color lightOrange do: [
   aCanvas
      moveTo: `(Point rho: 100 theta: 90 degreesToRadians)`;
      lineTo: `(Point rho: 100 theta: (360/5*2+90) degreesToRadians)`;
      lineTo: `(Point rho: 100 theta: (360/5*4+90) degreesToRadians)`;
      lineTo: `(Point rho: 100 theta: (360/5*6+90) degreesToRadians)`;
      lineTo: `(Point rho: 100 theta: (360/5*8+90) degreesToRadians)`;
      lineTo: `(Point rho: 100 theta: 90 degreesToRadians)` ]}

DrGeo uses this abstraction to implement its own canvas (@class{DrGSvgCanvas})
to render a sketch into an SVG file. It follows the public protocol of
@class{AbstractVectorCanvas}. The choice was made to make an implementation
from the @strong{Abstraction} hierarchy and not the @strong{Implementation}
one because the former is used as a parameter in the Morph's @method{drawOn:}
method.

In @xref{Sample01Star} drawing method, the used protocol to implement in
@class{DrGSvgCanvas} is @msg{strokeWidth:color:do:}, @msg{moveTo:}, and
@msg{lineTo:}.

Observe the implementations, in @class{AbstractVectorCanvas}:

@smalltalkMethod{strokeWidth: strokeWidth color: aStrokeColor do: pathCommandsBlock,
"Prepare parameters for drawing stroke."
self initForPath.
engine
   strokeWidth: strokeWidth
   color: aStrokeColor
   do: pathCommandsBlock}

Then in @class{DrGSvgCanvas}:

@smalltalkMethod{strokeWidth: strokeWidth color: strokeColor do: pathCommandsBlock,
self pathStrokeWidth: strokeWidth color: strokeColor fillColor: nil.
self doPath: pathCommandsBlock ensureClosePath: false}

@c
And at some point, operations occur in the XML tree:

@smalltalkMethod{pathStrokeWidth: strokeWidth color: strokeColor strokeDashArray: sda fillColor: fillColor,
pathNode := XMLElement named: #path.
self
   styleOf: pathNode
   StrokeWidth: strokeWidth
   color: strokeColor
   strokeDashArray: sda
   fillColor: fillColor.
@return{} pathNode}

The same goes for @method{lineTo:}

@smalltalkMethod{AbstractVectorCanvas>>lineTo: aPoint,
engine lineTo: aPoint.
currentPoint := aPoint.
lastControlPoint := currentPoint}

@smalltalkMethod{DrGSvgCanvas>>lineTo: point,
firstPoint ifNil: [@return{} self].
self addPathCommands: 'L '@comma{} point printMini.
currentPoint := point }

@class{DrGSvgCanvas} partially implements the public protocol of
@class{AbstractVectorCanvas}, restricted to the part used by DrGeo. It weighs
only 33 methods, and among them, only 17 are from the canvas abstraction.

@cindex design pattern @subentry strategy

@node Strategy
@section Strategy

To manage the diversity of the operating systems and hosts a @cuis{} application
is running on, the Strategy pattern is handy.

In DrGeo, it is implemented with a hierarchy of @class{DrGPlatform}, each one
with its own strategy to access resources and preferences in the host:
@class{DrGWorkstation} to operate on personal computers, @class{DrGDevelopment}
to operate in developer mode, @class{DrGAndroid} and @class{DrGiPad} on tablets.
The two latter ones are no longer implemented as DrGeo is not ported
to these devices anymore.

Then, in the @class{DrGeoSystem} class, it is decided which kind of platform to
use, depending on how the system is configured:

@smalltalkMethod{DrGeoSystem>>beWorkstation,
platform := DrGWorkstation new}

Or

@smalltalkMethod{DrGeoSystem>>beDevelopment,
"Be like the Cuis environment for DrGeo development"
platform := DrGDevelopment new}

The resources are accessed from the @class{DrGeoSystem} public class protocol
without knowing which platform is used underneath:

@smalltalkMethod{DrGeoSystem class>>iconsPath,
@return{} platform iconsPath}

It depends on the selected platform, which is only known by @class{DrGeoSystem}:

@smalltalkMethod{DrGPlatform>>iconsPath,
@return{} self resourcesPath / 'icons'}

@smalltalkMethod{DrGWorkstation>>iconsPath,
@return{} self resourcesPath / 'graphics' / 'iconsSVG'}
