@node Introduction
@chapter Introduction

This booklet is a collection of how-to guides to learn how to build
basic @acronym{GUI,Graphic User Interface} with @cuis{} and its
Morphic system. Some chapters,
such as @ref{What is a Morph after all?} and @ref{Design a GUI application}
present a deeper knowledge as well.
Most chapters can be read independently to serve the
needs of the reader.

The standard @cuis{} framework for building user interfaces is Morphic
3, it is the most refined version of the Morphic graphic system found in Smalltalk
environments. The classes provided by this framework are in the class
category @label{Morphic}. What non-Smalltalk GUI libraries refer to as
@emph{components} or @emph{widgets} are called @emph{Morphs} in
@cuis{}; therefore in the rest of this book the terms Morph, widget,
component are interchangeable.

@menu
* Overview::
* Quick Start::
@end menu

@node Overview
@section Overview
There are many provided morphs that are subclasses of the class
@class{Morph} and it's easy to create custom morphs.

The primary way of organizing morphs is to create instances of
@class{LayoutMorph} and add submorphs to them. Instances of
@class{LayoutMorph} can be nested to achieve pretty much any
layout. It is used massively, in a @cuis{} image with several browsers
open, there are tenth of layout.

Execute the code bellow with @kbd{Ctrl-p} to get the result printed in your image

@smalltalkExample{LayoutMorph allInstances size
@result{} 79.}

Open a Workspace and execute the following expressions

@smalltalkExample{
box := ColoredBoxMorph new.
box color: Color pink.
box morphExtent: 200 @@ 100.
box openInWorld}

to render a pink rectangle.

Open the halo of work-handles for this morph by holding down a key and clicking
it. The key to hold down depends on your platform. It is the
@kbd{Command} key in macOS and the @kbd{Control} key
or @kbd{shift+Control} key in other
platforms. With a three button mouse, you can middle-click
to get the halo. Click the red button in the upper-left of the halo to
remove the morph.

@node Quick Start
@section Quick Start
Rendering a single morph isn't particularly interesting. Let's render
some labels, a text input, and a button to implement a simple
application.

In a new Workspace, select and invoke the following code.
@kbd{Command+a} to select All, then @kbd{Command+d} to DoIt.

@smalltalkExampleCaption{My first layout, firstLayout,
| view input greetingLabel button row |

view := LayoutMorph newColumn.

"Create a single-line text input.
 Using zero for the height causes it to calculate
 the minimum required height for a single line."
input := TextModelMorph withText: '' ::
    hideScrollBarsIndefinitely;
    morphExtent: 200 @@ 0;
    wrapFlag: false.

greetingLabel := LabelMorph contents: '' ::
    color: Color red;
    font: FontFamily defaultFamilyAndPointSize bold.

"Create a button that when clicked execute
 the associated block of code"
button := PluggableButtonMorph
    model: [greetingLabel contents: 'Hello@comma{} '@comma{} input text@comma{} '!']
    action: #value.
button label: 'Greet'.

row := LayoutMorph newRow
    gap: 10;
    addMorph: (LabelMorph contents: 'Name:');
    addMorph: input;
    addMorph: button.

view
    padding: 20;
    addMorph: row;
    addMorph: greetingLabel;
    openInWorld}

@figure{My first interface,ch01-morphicGreeter,6}

This morph is a bit like a ``Hello World'' panel, it should be
inserted in window with proper title and icon to operate on. To remove
this panel, you need again the request its halo, it is not very
practical. Let's change the simple app we've built so it can be inside
a window. In the previous code, edit the end of the script to insert
our view in a @class{SystemWindow} instance.

Again, select the entire script and invoke it.

@smalltalkExample{[...]
view
    padding: 20;
    addMorph: row;
    addMorph: greetingLabel.

SystemWindow new ::
   setLabel: 'Hello World!';
   addMorph: view;
   openInWorld;
   morphExtent: 300@@100}

@figure{My first window,ch01-windowGreeter,6}
